{"version":3,"file":"stories-Modal-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAQA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;ACnGA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AAAA;AAOA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;;;;;;;;;;;;;;;;;ACDA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACXA;AAEA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@team-pick/together/./src/components/Button/index.tsx","webpack://@team-pick/together/./src/components/Button/style.ts","webpack://@team-pick/together/./src/components/Modal/index.tsx","webpack://@team-pick/together/./src/components/Modal/style.ts","webpack://@team-pick/together/./src/components/Modal/useModal.tsx","webpack://@team-pick/together/./src/components/Portal/index.tsx","webpack://@team-pick/together/./src/components/index.ts","webpack://@team-pick/together/./src/hooks/usePreventScroll.ts","webpack://@team-pick/together/./src/style/libStyle.ts"],"sourcesContent":["import React from \"react\";\nimport type { ButtonProps } from \"./types\";\nimport { ButtonStyle } from \"./style\";\n\nexport const Button = ({ color, size, disable = false, height = 72, style, children }: ButtonProps) => {\n  return (\n    <ButtonStyle color={color} size={size} disable={disable} height={height} style={style}>\n      {children}\n    </ButtonStyle>\n  );\n};\n","import { match } from \"ts-pattern\";\nimport type { ButtonColorType, ButtonProps, ButtonSizeType } from \"./types\";\nimport styled, { FlattenSimpleInterpolation, css } from \"styled-components\";\n\nconst sizeStyle: Record<ButtonSizeType, number> = {\n  small: 66,\n  large: 160,\n};\nconst disableColorStyle: Record<ButtonColorType, FlattenSimpleInterpolation> = {\n  \"Solid-Brand\": css`\n    background: #d5e2ec;\n    color: #8da6b8;\n  `,\n  \"Line-Grey\": css`\n    background: #e6e6e6;\n    border: 1px solid #e6e6e6;\n    color: #a0a0a0;\n  `,\n  \"Line-Brand\": css`\n    background: #ffffff;\n    color: #8da6b8;\n    border: 1px solid #8da6b8;\n  `,\n  \"Solid-Grey\": css`\n    background: #e6e6e6;\n    color: #a0a0a0;\n  `,\n};\nconst colorStyle: Record<ButtonColorType, FlattenSimpleInterpolation> = {\n  \"Solid-Brand\": css`\n    background: #0068ff;\n    color: #fff;\n\n    &:hover {\n      background: #2649ff;\n    }\n  `,\n  \"Line-Grey\": css`\n    background: #ffffff;\n    border: 1px solid #1c1c1e;\n    color: #1c1c1e;\n\n    &:hover {\n      background: #f8fafc;\n      border: 1px solid #454545;\n      color: #454545;\n    }\n  `,\n  \"Line-Brand\": css`\n    background: #fff;\n    border: 1px solid #0068ff;\n    color: #0068ff;\n\n    &:hover {\n      border: 1px solid #2649ff;\n      background: #f3feff;\n    }\n  `,\n  \"Solid-Grey\": css`\n    background: #1c1c1e;\n    color: #fff;\n\n    &:hover {\n      background: #454545;\n    }\n  `,\n};\n\nconst sizePattern = (size: ButtonSizeType) =>\n  match<ButtonSizeType, number>(size)\n    .with(\"small\", (size) => sizeStyle[size])\n    .with(\"large\", (size) => sizeStyle[size])\n    .otherwise(() => sizeStyle.small);\n\nconst colorPattern = (color: ButtonColorType) =>\n  match<ButtonColorType, FlattenSimpleInterpolation>(color)\n    .with(\"Line-Brand\", (color) => colorStyle[color])\n    .with(\"Line-Grey\", (color) => colorStyle[color])\n    .with(\"Solid-Brand\", (color) => colorStyle[color])\n    .with(\"Solid-Grey\", (color) => colorStyle[color])\n    .otherwise(() => colorStyle[\"Solid-Brand\"]);\n\nconst disableColorPattern = (color: ButtonColorType) =>\n  match<ButtonColorType, FlattenSimpleInterpolation>(color)\n    .with(\"Line-Brand\", (color) => disableColorStyle[color])\n    .with(\"Line-Grey\", (color) => disableColorStyle[color])\n    .with(\"Solid-Brand\", (color) => disableColorStyle[color])\n    .with(\"Solid-Grey\", (color) => disableColorStyle[color])\n    .otherwise(() => disableColorStyle[\"Solid-Brand\"]);\n\nexport const ButtonStyle = styled.button<ButtonProps>`\n  border-radius: 8px;\n  font-size: 16px;\n  border: none;\n  width: ${({ size }) => `${sizePattern(size)}px`};\n  ${({ color, disable }) => (disable ? disableColorPattern(color) : colorPattern(color))};\n  height: ${({ height }) => `${height}px`};\n  outline: none;\n  cursor: ${({ disable }) => (disable ? \"not-allowed\" : \"pointer\")};\n`;\n","import React from \"react\";\nimport { ModalButtonsProps, ModalContentProps, ModalIcon, ModalProps, ModalTitleProps } from \"./types\";\nimport * as S from \"./style\";\nimport { usePreventScroll } from \"../../hooks/usePreventScroll\";\n\nconst ModalContainer = ({ children, style }: ModalProps) => {\n  usePreventScroll();\n\n  return <S.Container style={style}>{children}</S.Container>;\n};\n\nconst Icon = ({ children, style }: ModalIcon) => {\n  return <S.Icon style={style}>{children}</S.Icon>;\n};\n\nconst Title = ({ children, style }: ModalTitleProps) => {\n  return <S.Title style={style}>{children}</S.Title>;\n};\n\nconst Content = ({ children, style }: ModalContentProps) => {\n  return <S.Content style={style}>{children}</S.Content>;\n};\n\nconst Buttons = ({ children, style }: ModalButtonsProps) => {\n  return <S.ButtonsContainer style={style}>{children}</S.ButtonsContainer>;\n};\n\nexport const Modal = Object.assign(ModalContainer, { Icon, Title, Content, Buttons });\n","import styled, { CSSObject } from \"styled-components\";\nimport { AbsoluteCenter } from \"../../style/libStyle\";\n\nexport const Container = styled.div<{ style?: CSSObject }>`\n  min-width: 400px;\n  padding: 24px;\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border-radius: 16px;\n  box-sizing: border-box;\n  z-index: 10;\n\n  ${AbsoluteCenter}\n\n  @media screen and (max-width: 768px) {\n    min-width: 368px;\n    padding: 16px;\n  }\n\n  ${({ style }) => style}\n`;\n\nexport const Icon = styled.div<{ style?: CSSObject }>`\n  width: 80px;\n  height: 80px;\n  border-radius: 16px;\n  background-color: #c0f3ff;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  ${({ style }) => style}\n`;\n\nexport const Title = styled.h3<{ style?: CSSObject }>`\n  color: #1c1c1e;\n  font-weight: bold;\n  margin: 0px;\n  font-size: 20px;\n  line-height: 28px;\n  margin-top: 16px;\n\n  ${({ style }) => style}\n`;\n\nexport const Content = styled.p`\n  color: #1c1c1e;\n  font-size: 16px;\n  line-height: 24px;\n  margin: 0px;\n  margin-top: 8px;\n  font-weight: 400;\n`;\n\nexport const ButtonsContainer = styled.div<{ style?: CSSObject }>`\n  width: 100%;\n  ${({ style }) => style}\n  margin-top : 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n\n  button {\n    width: 160px;\n    height: 48px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 16px;\n    cursor: pointer;\n    border-radius: 8px;\n\n    @media screen and (max-width: 768px) {\n      width: 100%;\n    }\n  }\n\n  .cancel {\n    border: 1px solid #0068ff;\n    color: #0068ff;\n    background-color: white;\n  }\n\n  .submit {\n    background-color: #0068ff;\n    border: 0px;\n    color: white;\n  }\n\n  ${({ style }) => style}\n`;\n","import React from \"react\";\nimport { useState, ReactNode, useCallback, isValidElement } from \"react\";\nimport { Portal } from \"../Portal\";\n\ninterface Props {\n  closedCallback?: VoidFunction;\n  openedCallback?: VoidFunction;\n}\n\nexport const useModal = ({ closedCallback, openedCallback }: Props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const open = useCallback(() => {\n    setIsOpen(true);\n    openedCallback?.();\n  }, []);\n\n  const close = useCallback(() => {\n    setIsOpen(false);\n    closedCallback?.();\n  }, []);\n\n  const renderModal = useCallback(\n    (modal: ReactNode) => {\n      if (isOpen && isValidElement(modal)) {\n        return <Portal selector=\"#modal\">{modal}</Portal>;\n      }\n    },\n    [isOpen],\n  );\n\n  return { open, close, renderModal };\n};\n","import ReactDOM from \"react-dom\";\nimport { PortalProps } from \"./types\";\n\nexport const Portal = ({ children, selector }: PortalProps) => {\n  if (!children) {\n    throw new Error(\"children are required\");\n  }\n\n  const selectedDOM = document.querySelector(selector);\n\n  return selectedDOM ? ReactDOM.createPortal(children, selectedDOM) : null;\n};\n","export * from \"./Button\";\nexport * from \"./Modal\";\nexport * from \"./Portal\";\n","import { useLayoutEffect } from \"react\";\n\nexport const usePreventScroll = () => {\n  useLayoutEffect(() => {\n    const originalStyle = window.getComputedStyle(document.body).overflow;\n    document.body.style.overflow = \"hidden\";\n\n    return () => {\n      document.body.style.overflow = originalStyle;\n    };\n  }, []);\n};\n","import { css } from \"styled-components\";\n\nexport const AbsoluteCenter = css`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n"],"names":[],"sourceRoot":""}